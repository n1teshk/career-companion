class Click < ApplicationRecord
  belongs_to :user
  belongs_to :course, optional: true
  belongs_to :application, optional: true
  
  validates :clicked_at, presence: true
  validates :ip_address, format: { with: Resolv::AddressRegex }, allow_blank: true
  validates :conversion_value, numericality: { greater_than: 0 }, allow_nil: true
  
  validate :converted_at_presence_when_converted
  validate :course_or_application_present

  scope :converted, -> { where(converted: true) }
  scope :unconverted, -> { where(converted: false) }
  scope :recent, -> { order(clicked_at: :desc) }
  scope :by_date_range, ->(start_date, end_date) { where(clicked_at: start_date..end_date) }
  scope :by_course, ->(course) { where(course: course) }
  scope :by_user, ->(user) { where(user: user) }
  scope :with_utm_source, ->(source) { where(utm_source: source) }
  scope :with_utm_campaign, ->(campaign) { where(utm_campaign: campaign) }

  # Analytics scopes
  scope :this_month, -> { where(clicked_at: Time.current.beginning_of_month..Time.current.end_of_month) }
  scope :last_month, -> { where(clicked_at: 1.month.ago.beginning_of_month..1.month.ago.end_of_month) }
  scope :this_week, -> { where(clicked_at: Time.current.beginning_of_week..Time.current.end_of_week) }
  scope :today, -> { where(clicked_at: Time.current.beginning_of_day..Time.current.end_of_day) }

  def time_to_conversion
    return nil unless converted? && converted_at.present?
    
    converted_at - clicked_at
  end

  def conversion_delay_hours
    delay = time_to_conversion
    return nil unless delay
    
    (delay / 1.hour).round(2)
  end

  def utm_params
    {
      utm_source: utm_source,
      utm_medium: utm_medium, 
      utm_campaign: utm_campaign
    }.compact
  end

  def utm_params_present?
    utm_params.any?
  end

  def referrer_domain
    return nil if referrer.blank?
    
    uri = URI.parse(referrer)
    uri.host
  rescue URI::InvalidURIError
    nil
  end

  def mobile_device?
    return false if user_agent.blank?
    
    user_agent.match?(/Mobile|Android|iPhone|iPad/i)
  end

  def browser_info
    return {} if user_agent.blank?
    
    # Simple browser detection
    case user_agent
    when /Chrome/i
      { browser: 'Chrome' }
    when /Firefox/i
      { browser: 'Firefox' }
    when /Safari/i
      { browser: 'Safari' }
    when /Edge/i
      { browser: 'Edge' }
    else
      { browser: 'Other' }
    end
  end

  # Get the source context for this click
  def source_context
    {
      ip_address: ip_address,
      user_agent: user_agent,
      referrer: referrer,
      utm_source: utm_source,
      utm_medium: utm_medium,
      utm_campaign: utm_campaign,
      application_id: application_id
    }
  end

  # Check if click led to conversion within specified time
  def converted_within?(duration)
    return false unless converted?
    
    time_to_conversion && time_to_conversion <= duration
  end

  # Get revenue generated by this click
  def revenue
    return 0 unless converted? && conversion_value.present?
    
    conversion_value
  end

  private

  def converted_at_presence_when_converted
    if converted? && converted_at.blank?
      errors.add(:converted_at, "must be present when click is converted")
    end
  end

  def course_or_application_present
    if course_id.blank? && application_id.blank?
      errors.add(:base, "must be associated with either a course or application")
    end
  end
end